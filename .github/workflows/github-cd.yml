name: github-cd
on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: set up jdk 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: set application db
        uses: microsoft/variable-substitution@v1
        with:
          files: ./domain/src/main/resources/application-db.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}

      - name: set application weather
        uses: microsoft/variable-substitution@v1
        with:
          files: ./api/src/main/resources/application-weather.yml
        env:
          weather.serviceKey: ${{ secrets.WEATHER_KEY }}

      - name: set application weather test
        uses: microsoft/variable-substitution@v1
        with:
          files: ./api/src/test/resources/application-test.yml
        env:
          weather.serviceKey: ${{ secrets.WEATHER_KEY }}

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306
          container port: 3306
          mysql version: '8.0'
          mysql database: ${{secrets.DB_NAME}}
          mysql user: ${{secrets.DB_USERNAME}}
          mysql password: ${{secrets.DB_PASSWORD}}

      - name: set up gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/message-agent

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: NCP login and docker image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker rm -f $(sudo docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/message-agent
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/message-agent
            sudo docker image prune -f
            ps -ef | grep
