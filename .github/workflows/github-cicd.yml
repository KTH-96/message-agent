name: github-cicd
on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: set up jdk 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: set application db
        uses: microsoft/variable-substitution@v1
        with:
          files: ./domain/src/main/resources/application-db.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}

      - name: set application weather
        uses: microsoft/variable-substitution@v1
        with:
          files: ./api/src/main/resources/application-weather.yml
        env:
          weather.serviceKey: ${{ secrets.WEATHER_KEY }}

      - name: set application weather test
        uses: microsoft/variable-substitution@v1
        with:
          files: ./api/src/test/resources/application-test.yml
        env:
          weather.serviceKey: ${{ secrets.WEATHER_KEY }}

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306
          container port: 3306
          mysql version: '8.0'
          mysql database: ${{secrets.DB_NAME}}
          mysql user: ${{secrets.DB_USERNAME}}
          mysql password: ${{secrets.DB_PASSWORD}}

      - name: set up gradle
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
        with:
          arguments: build

      - uses: actions/upload-artifact@v3
        with:
          name: api-artifact
          path: ./api/build/libs/api.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Copy Docker Compose File to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.NCP_USERNAME }}"

      - name: NCP login and docker compose run
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /home/${{ secrets.NCP_USERNAME }}   
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
            sudo docker-compose -f docker-compose.yml down
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo DB_PASSWORD=${{ secrets.DB_PASSWORD }} DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker-compose -f docker-compose.yml up -d
            sudo docker image prune -f          
